import pygame, simpleGE


#leaf CHECK HOW TO ADD 2 MORE (3 DIFFERENT KINDS) !!!!!!!!!!!!!!!!!!!!
class Leaf(simpleGE.Sprite):
	def __init__(self, scene):
		super().__init__(scene)
		self.setImage("leaf1.png")
		self.setSize(35, 35)
		self.reset()
	
	def __init__(self, scene):
		super().__init__(scene)
		self.setImage("leaf2.png")
		self.setSize(35, 35)
		self.reset()

	def __init__(self, scene):
		super().__init__(scene)
		self.setImage("leaf3.png")
		self.setSize(35, 35)
		self.reset()

	def reset(self):
	self.y = 3
	self.x = random.randit (0, self.screenWidth)
	self.dy = random.randit(3, 8)

	def checkBounds(self):
		if self.bottom > self.screenHeight:
			self.reset()



#butterfly - RECHECK UP AND DOWN KEY MOTIONS !!!!!!!!!!!!!!!!!!!
class Butterfly(simpleGE.Sprite):
	def __init__(self, scene):
		self.setImage("butterfly.pmg")
		set.setSize(50, 50)
		self.position = (320, 400)
		self.moveSpeed = 5

	def process(self):
		if self.isKeyPressed(pygame.K_LEFT):
			self.x -= self.moveSpeed
		if self.isKeyPressed(pygame.K_RIGHT):
			self.x -= self.moveSpeed
		if self.isKeypressed(pygame.K_UP):
			self.y -= self.moveSpeed
		if self.isKeyPressed(pygame.K_DOWN):
			self.y -= self.moveSpeed


#scorekeeping CHECK CORRECT SCORE KEEPING SETTING // LOCATION
class LblScore(simpleGE.Label):
	def __init__(self):
		super().__init__()
		self.text = "Score: 0 Leaf(s)"
		self.center = (100, 300)

#time CHECK CORRECT TIME KEEPING SETTING // LOCATION
class LblTime(simpleGE.Label):
	def __init__(self):
		super().__init__()
		self.text = "Time Left: 1:30"
		self.center = (500, 30)


		



#background, leaf crunch sound effect (RECHECK SOUND)!!!!!!!!!!!!!
		
class Game(simpleGE.Scene):
	def __init__(self):
		super().__init__()
		self.setImage("picnictable.png")

		self.sndLeaf = simpleGE.Sound("leafcrunch.flac")

		self.butterfly = Butterfly(self)
		self.numLeafs = 3
		self.leafs = []
		for i in range(self.numLeafs):
			self.leafs.append(Leaf(self))

		self.lblScore = LblScore()
		self.lblTime = LblTime()


#self.leaf = Leaf(self)!!!!!!

		self.sprites = [self.burtterfly,
				self.leaf,
				self.lblScore,
				self.lblTime]

	def process(self):
		for coin in self.coins:
			if self.butterfly.collidesWith(leaf):
				self.sndLeaf.play()
				coin.reset()
				self.scrore += 1
				self.lblScore.text = f"Score:  Leaf(s){self.score]"

		self.lblTime.text = f"Time Left: {self.timer.getTimeLeft():.2f}"
		if self.timer.getTimeLeft() < 0:
			print(f"Final Score: {self.score}")
			self.stop


#instructions RECHECK ALL LOCATION PLACEMENTS
class Instructions(simple.Sene):
	def __init__(self, score):
		super().__init__()
		self.setImage("instructionsbackground.png)

		self.response = "Flutter In"

		self.instructions = simpleGE.MultiLabel()
		self.instruction.textLines = [
		"You are a butterfly",
		"looking for the best",
		"sleeping lead.",
		"How many can you grab",
		"until you have find the",
		"right one?"]

		self.intrsuctions.center = (320, 240)
		self.instrucions.size = (200, 250)

		self.prevScore = score
		self.lblScore = simpleGE.Label()
		self.lblScore.text = f"Last Score: {self.prevscore}"
		self.lblScore.center = (320, 400)

		self.btnPlay = simpleGE.Button()
		self.btnPlay.text = "Flutter In"
		self.btnPlay.center = (100, 400)

		self.btnQuit = simpleGE.Button()
		self.btnQuit.text = "Flutter Away)
		self.btnQuit.center = (550, 400)

		self.sprites = [self.instructions,
				self.lblScore,
				self.btnQuit,
				self.btnPlay]

#second process
	def process(self):
	#buttons
	if self.btnQuit.clicked:
		self.response = "Flutter Away"
		self.stop()
	if self.btnPlay.clicked:
		self.response = "Flutter In"
		self.stop()




	def main():
		keepGoing = True
		score = 0
		while keepGoing:

			instructions = Instructions(score)
			instructions.start()

			if instructions.response == "Flutter In":
				game = Game()
				game.start()
				score = game.score
			else:
				keepGoing = False
			


	if __name__ == "__main__":
		main()